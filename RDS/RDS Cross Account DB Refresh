import boto3
import time
import requests
import sys
from operator import itemgetter
from pprint import pprint


# grab current time for role and DB Snapshot names
time_stamp = time.strftime("%Y%m%d-%H%M%S")


def assume_role(role_arn, region):
    """Grabs temporary keys of assumed roles from ARN

    Args:
        role_arn: ARN of the role you want to assume
        region: AWS Region based on Environment selected input_Environemnt

    Returns:
        temp_key: Temporary key for assumed role
        temp_secret: Temporary secret key for assumed role
    """

    # set resource and region
    client = boto3.client(
        'sts',
        region_name = region
        )

    response = client.assume_role(
        RoleArn=role_arn,
        RoleSessionName='RDSTask' + time_stamp
        )

    temp_key = response['Credentials']['AccessKeyId']
    temp_secret = response['Credentials']['SecretAccessKey']
    temp_token = response['Credentials']['SessionToken']

    return temp_key, temp_secret, temp_token


def rds_client(temp_key, temp_secret, temp_token, db_name, region):
    
    # set resource and region
    client = boto3.client(
        'rds',
        region_name = region,
        aws_access_key_id = temp_key,
        aws_secret_access_key = temp_secret,
        aws_session_token = temp_token
        )
    
    return client
    
def copy_latest_snapshot(db_identifier, client, waiter):
    snapshot_copy = f"snapshot-copy{time_stamp}"
    response = client.describe_db_snapshots(DBInstanceIdentifier=db_identifier, SnapshotType='automated')
    sorted_keys = sorted(response['DBSnapshots'], key=itemgetter('SnapshotCreateTime'), reverse=True)
    snapshot_id = sorted_keys[0]['DBSnapshotIdentifier']
    DBSnapshotId = sorted_keys[0]['DBSnapshotArn']
    waiter.wait(
        DBInstanceIdentifier=db_identifier,
        DBSnapshotIdentifier=snapshot_id,
        WaiterConfig={'Delay': 10, 'MaxAttempts': 100}
    )
    client.copy_db_snapshot(
        SourceDBSnapshotIdentifier=snapshot_id,
        TargetDBSnapshotIdentifier=snapshot_copy,
    )

    return snapshot_copy, snapshot_id, response, DBSnapshotId

def share_copy_snapshot(db_identifier, snapshot_id, nonprodaccount, client, waiter):
        waiter.wait(
            DBInstanceIdentifier=db_identifier,
            DBSnapshotIdentifier=snapshot_id,
            WaiterConfig={'Delay': 10, 'MaxAttempts': 100}
        )
        client.modify_db_snapshot_attribute(
            DBSnapshotIdentifier=snapshot_id,
            AttributeName="restore",
            ValuesToAdd=[nonprodaccount]
        )

def get_latest_snapshot_arn(client, db_identifier):
    response = client.describe_db_snapshots(
        DBSnapshotIdentifier=db_identifier,        
        IncludeShared=True,
        SnapshotType="shared",
    )
    sorted_keys = sorted(response['DBSnapshots'], key=itemgetter('SnapshotCreateTime'), reverse=True)
    snapshot_arn = sorted_keys[0]['DBSnapshotArn']
    
    return response, snapshot_arn

def execute_rest(method, url, bearer_token, data):
    headers = {
        'Authorization': 'BEARER ' + bearer_token + '',
        'Content-Type': 'application/json'
    }
    
    response = requests.request(method, url, headers=headers, json=data)
    json = response.json()
    
    return json

def get_vars(appliance_name, bearer_token, app, snapshot_arn):
    url = "https://"+appliance_name+"/api/apps/"+app+"/prepare-apply"
    data = ({
      "templateParameter": {
        "apply_immediately": False
      }
    })
    response = execute_rest("POST", url, bearer_token, data)
    (response['data']['templateParameter']['snapshot_identifier']) = snapshot_arn
    parameters = (response['data']['templateParameter'])
    
    return parameters

def apply_state(appliance_name, bearer_token, app, parameters):
    url = "https://"+appliance_name+"/api/apps/"+app+"/apply"
    data = ({
      "templateParameter": parameters
    })
    response = execute_rest("POST", url, bearer_token, data)

    
def main():

    # grab inputs from morpheus dictory
    input_prod_arn = 'arn:aws-us-gov:iam::147884775654:role/AWSCrossAccountRoleForTerraform'  #morpheus['customOptions']['RDSRoleARN']
    input_nonprod_arn = 'arn:aws-us-gov:iam::940330411695:role/AWSCrossAccountRoleForTerraform'  #morpheus['customOptions']['RDSRoleARN']
    input_db_name = 'boyd888'  #morpheus['customOptions']['RDSInstance']
    input_environemnt = 'Prod' #morpheus['customOptions']['RDSENV']
    nonprod_account = input_nonprod_arn[input_nonprod_arn.find("iam::")+5:input_nonprod_arn.find(":role")]
    prod_account = input_prod_arn[input_prod_arn.find("iam::")+5:input_prod_arn.find(":role")]
    appliance_name = "dmc3.ginniemae.cloud"
    bearer_token = "d877d0fd-17b8-4e41-bc71-b01fe8619cbb"
    app = "1521"


    # Check instance environment
    if input_environemnt == "DR":
      region = 'us-gov-east-1'
    else:
      region = 'us-gov-west-1'

    ####################################################################
    ####From Prod AWS Account
    ####################################################################   
    
    # grab temp keys for Prod
    temp_key, temp_secret, temp_token = assume_role(input_prod_arn, region)

    # connect rds client
    client = rds_client(temp_key, temp_secret, temp_token, input_db_name, region)
    waiter = client.get_waiter('db_snapshot_available')
    
    #list snapshots 
    #list_snapshots = client.describe_db_snapshots(
    #                DBInstanceIdentifier=input_db_name
    #           )
    
    #copy DB snapshot
    snapshot_copy, snapshot_id, response, DBSnapshotId = copy_latest_snapshot(input_db_name, client, waiter)
    share_snapshot = share_copy_snapshot(input_db_name, snapshot_copy, nonprod_account, client, waiter)
    
    #Create snapshot ARN from known values
    DBSnapshotArn = "arn:aws-us-gov:rds:" + region + ":" + prod_account + ":snapshot:" + snapshot_copy
    
    #######################################################################
    ####From Non Prod AWS Account 
    #######################################################################
    
    # grab temp keys for Prod
    temp_key, temp_secret, temp_token = assume_role(input_nonprod_arn, region)
    
    # connect rds client
    client = rds_client(temp_key, temp_secret, temp_token, input_db_name, region)
    
    #Validate Snapshot ARN from known values exists
    response, snapshot_arn = get_latest_snapshot_arn(client, DBSnapshotArn)
    
    ##########################################################################
    ####Update NonProd DB
    ##########################################################################
    parameters = get_vars(appliance_name, bearer_token, app, snapshot_arn)
    apply_state(appliance_name, bearer_token, app, parameters)

if __name__ == "__main__":
    main()
